# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Account Entity"""
type Account {
  """Amount"""
  balance: Float!
  createdAt: DateTime!

  """EUR/USD/YEN"""
  currency: Currency

  """Account balance"""
  default: Boolean!
  id: ID!
  updatedAt: DateTime!
  user: User
}

input AccountCreateInput {
  currency: Currency!
}

type Auth {
  """JWT access token"""
  accessToken: String!

  """JWT refresh token"""
  refreshToken: String!
  user: User!
}

input AuthRefreshTokenInput {
  refreshToken: String!
}

input AuthSignupInput {
  email: String!
  firstName: String!
  gender: Gender
  lastName: String!
  phone: String
}

"""Currency"""
enum Currency {
  EUR
  USD
  YEN
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The Gender of the User"""
enum Gender {
  FEMALE
  MALE
  OTHER
}

type Mutation {
  accountCreate(data: AccountCreateInput!): Account!
  authRefreshToken(data: AuthRefreshTokenInput!): Auth!
  authSignup(data: AuthSignupInput!): Auth!
  transactionCreate(data: TransactionCreateInput!): Transaction!
}

input PaginationArgs {
  limit: Int
  offset: Int
}

type Query {
  me: User!
  transactionList(pagination: PaginationArgs, where: TransactionWhere): TransactionCount!
  user(data: UserSingleInput!): User!
  userList: [User!]!
}

"""Account Entity"""
type Transaction {
  """Amount"""
  amount: Float!
  createdAt: DateTime!

  """EUR/USD/YEN"""
  currency: Currency

  """Description"""
  description: String

  """Exchange rate"""
  exchangeRate: Float!
  id: ID!
  receiver: User
  sender: User
  updatedAt: DateTime!
}

"""Account Entity"""
type TransactionCount {
  count: Int!
  data: [Transaction!]!
}

input TransactionCreateInput {
  amount: Float!
  currency: Currency!

  """Description"""
  description: String
  exchangeRate: Float!
  receiverId: ID!
}

input TransactionWhere {
  or: [TransactionWhereFields!]
  receiver: UserWhereFields
  sender: UserWhereFields
}

input TransactionWhereFields {
  receiver: UserWhereFields
  sender: UserWhereFields
}

"""User Entity"""
type User {
  accounts: [Account!]
  createdAt: DateTime!

  """EUR/USD/YEN"""
  currency: Currency

  """Email address"""
  email: String!

  """First name"""
  firstName: String!

  """Male/Female/Other"""
  gender: Gender
  id: ID!

  """Last name"""
  lastName: String!

  """Phone Number"""
  phone: String
  updatedAt: DateTime!
}

input UserSingleInput {
  id: ID!
}

input UserWhereFields {
  id: String
}